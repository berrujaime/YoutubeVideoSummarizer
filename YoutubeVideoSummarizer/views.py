from django.shortcuts import render
from django.http import JsonResponse
import os
from youtube_transcript_api import YouTubeTranscriptApi
from urllib.parse import urlparse, parse_qs
from openai import OpenAI

#from dotenv import load_dotenv
#load_dotenv()

client = OpenAI(
    api_key=os.getenv('OPENAI_API_KEY'),
)

# This code from Vertex AI is no longer necessary and is commented out:
# vertexai.init(project=str(os.getenv('PROJECT_ID')), location=str(os.getenv('LOCATION')))
# osModel = str(os.getenv('MODEL'))
# model = GenerativeModel(osModel)

# Functions to summarize
def obtain_best_language(video_id):
    transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
    # iterate over all available transcripts looking for en manually created
    for transcript in transcript_list:
        if transcript.language_code == 'en' and transcript.is_generated == False:
            return ['en'], 'English'
    # if there is no english manually created search for any language manually created
    for transcript in transcript_list:
        if transcript.is_generated == False:
            return [transcript.language_code], transcript.language
        break
    # if there is no manually created return the language automatically generated by YouTube
    for transcript in transcript_list:
        if transcript.is_generated == True:
            return [transcript.language_code], transcript.language.split()[0]
    return None

def get_video_transcript(video_id):
    try:
        # Obtener el mejor idioma disponible
        language, languageDesc = obtain_best_language(video_id)

        # Usar el proxy aleatorio para obtener la transcripción
        transcript = YouTubeTranscriptApi.get_transcript(video_id, languages=language)
        
        # Formatear la transcripción en texto
        transcript_text = '\n'.join([t['text'] for t in transcript])
        return transcript_text, languageDesc

    except Exception as e:
        print(e, flush=True)
        raise e

# URLS functions
def home(request):
    return render(request, 'index.html')

def homelang(request, lang):
    return render(request, 'index.html')

def donate(request):
    return render(request, 'donate.html')

def donatelang(request, lang):
    return render(request, 'donate.html')

def summarize(request):
    if request.method == 'POST':
        video_id = request.POST.get('youtube_id')
        if not video_id:
            return JsonResponse({'error': 'youtube_url is required'}, status=400)

        transcript, transcript_language = get_video_transcript(video_id)
        
        if request.POST.get('lang') == 'fr':
            lang = 'french'
        elif request.POST.get('lang') == 'en':
            lang = 'english'
        else:
            lang = 'spanish'
        
        prompt = f"""
        Please identify and summarize in {lang} the main ideas of the following youtube video transcription written in {transcript_language}:
        {transcript}
        Use bullet points for each main idea. The title of your answer must be "Here is the summary of your video:" in the language of the summary. For example, if the language required is spanish, the title of your answer must be "Aquí está el resumen de su video:".
        """
        if request.POST.get('detail') == 'extense':
            prompt += " Provide detailed information and add any information you consider necessary to explain a main idea that does not have much context."
        else:
            prompt += " Be concise and avoid unnecessary details."

        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": f"You are a helpful assistant that talks in {lang}."},
                    {"role": "user", "content": prompt}
                ]
            )
            summary = response.choices[0].message.content.strip()
            return JsonResponse({'summary': summary})
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)
    else:
        return JsonResponse({'error': 'Method not allowed'}, status=405)
